"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var chouon = require('./chouon');

var checkNoSpace = function checkNoSpace(text) {
  var noSpace_before = /[^、。”「a-zA-Z0-9!"#-'()*-\/;-@¥\[\]\\^_{-~\s]([a-zA-Z0-9!#-'(*-\.;<=?-@¥\[\\^_{-~])+?/gm;
  var noSpace_after = /([a-zA-Z0-9!#-')*-\.;=-@¥\]\\^_{-~])+?[^、。”」a-zA-Z0-9!"#-'()*-\/:-@¥\[\]\\^_{-~\s]/gm;
  var matches_b = noSpace_before.exec(text);
  var matches_a = noSpace_after.exec(text);
  var results = [];

  if (matches_b) {
    if (!/\.{3}/.exec(text)) {
      results.push({
        message: "スペースが必要です",
        index: matches_b.index
      });
    }
  }

  if (matches_a) {
    results.push({
      message: "スペースが必要です",
      index: matches_a.index
    });
  }

  return results;
};

module.exports = function (context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var Syntax = context.Syntax,
      RuleError = context.RuleError,
      report = context.report,
      getSource = context.getSource;
  return _defineProperty({}, Syntax.Str, function (node) {
    // "Str" node
    var text = getSource(node); // Get text

    chouon.forEach(function (c) {
      var matches = new RegExp(c + "[^ー$]", 'gm').exec(text); // Found "bugs"

      if (!matches) {
        return;
      }

      var indexOfBugs = matches.index;
      var ruleError = new RuleError("".concat(c, " \u306B\u9577\u97F3\u8A18\u53F7\u304C\u5FC5\u8981\u3067\u3059"), {
        index: indexOfBugs // padding of index

      });
      report(node, ruleError);
    });
    var results = checkNoSpace(text);
    results.forEach(function (r) {
      var ruleError = new RuleError(r.message, {
        index: r.index
      });
      report(node, ruleError);
    });
  });
};
//# sourceMappingURL=index.js.map